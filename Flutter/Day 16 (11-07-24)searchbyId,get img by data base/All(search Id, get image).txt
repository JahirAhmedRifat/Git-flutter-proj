--------------------------------------------- Student search by id // flutter part -----------------------------------------

import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import 'package:student/student.dart';


List<Student> objectsFromJson(String str) =>
    List<Student>.from(json.decode(str).map((x) => Student.fromJson(x)));
String objectsToJson(List<Student> data) =>
    json.encode(List<Student>.from(data).map((x) => x.toJson()));




class Searchid extends StatefulWidget {
  const Searchid({super.key});

  @override
  State<Searchid> createState() => _SearchidState();
}



class _SearchidState extends State<Searchid> {
  TextEditingController _id = TextEditingController();

  String searchid = "";
  late List<Student> _students = [];

  // Future<List<Student>> showall() async {
  //   final response = await http.get(
  //     Uri.parse('http://192.168.0.220:8080/students'),
  //   );
  //   if (response.statusCode == 200) {
  //     return objectsFromJson(response.body);
  //   } else {
  //     throw Exception("Failed");
  //   }
  // }
  //
  // void show()async{
  //   _students = await showall();
  // }

  Future<List<Student>> showbyid(String id) async {
    var response;

    if(id.length == 0 ){
      //response = await http.get(Uri.parse('http://192.168.0.220:8080/students'),);
      response = await http.get(
        Uri.parse('http://192.168.0.220:8080/search/'+id),
      );
    }else{
      response = await http.get(
        Uri.parse('http://192.168.0.220:8080/search/'+id),
      );
    }

    if (response.statusCode == 200) {
      return objectsFromJson(response.body);
    } else {
      throw Exception("Failed");
    }
  }

  void showid()async{
    _students = await showbyid(_id.text);
    setState(() {

    });
  }

  @override
  void initState() {
    // TODO: implement initState
    //show();
    super.initState();
  }



  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Search By Id"),
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        children: [
          Container(
            child: Form(
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Expanded(
                    flex: 2,
                    child: TextFormField(
                      controller: _id,
                      validator: (String? value) {
                        if (value!.isEmpty) {
                          return 'please enter id';
                        }
                      },
                      decoration: InputDecoration(
                          labelText: 'id',
                          //hintText: 'Enter id',
                          border: OutlineInputBorder(
                              borderRadius: BorderRadius.circular(5.0))),
                    ),
                  ),
                  Expanded(
                    flex: 1,
                    child: Padding(
                      padding: const EdgeInsets.fromLTRB(10, 0, 10, 0),
                      child: ElevatedButton(
                        onPressed: () {
                          if (_id.text.length == 0) {
                            //showall();
                          } else {
                            searchid = _id.text;
                          }
                          showid();

                          setState(() {});
                        },
                        child: Text("Search"),
                        style: ButtonStyle(
                          shape: WidgetStateProperty.all(
                            RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(5),
                              side: BorderSide(color: Colors.red),
                            ),
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),

          SizedBox(
            height: 200,
            child: FutureBuilder<List<Student>>(
              future: showbyid(_id.text),
              builder: (context, snapshot){
                if(snapshot.hasData){
                  return ListView.builder(
                    itemCount: snapshot.data!.length,
                    itemBuilder: (context, index){
                      return ListTile(
                        leading: Text(snapshot.data![index].id.toString()),
                        title: Text(snapshot.data![index].name.toString()),
                      );


                    },);

                }else if(snapshot.hasError){
                  return Text("");
                }else{
                  return CircularProgressIndicator();
                }
              },
            ),
          ),
        ],
      ),
    );
  }
}

------------------------------------------ spring Controller --------------------------------

package com.example.demo;
import java.util.ArrayList;
import java.util.List;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import org.springframework.web.bind.annotation.RestController;
@CrossOrigin(origins = "*")
@RestController
public class StudentController {
	List<Student> stlist=new ArrayList<>();
	
	@PostMapping(value="/login")
	public Student signinStudent(@RequestBody Student s) {
		StudentDA d = new StudentDA();
		Student st=d.studentSigninById(s.id);
		return st;
	}

	@PostMapping(value="/insert")
	public Student insertStudent(@RequestBody Student s) {
		StudentDA d = new StudentDA();
		Student st=d.insert(s);
		return st;
	}
	
	@GetMapping(value="/students")
	public List<Student> allstudent(){
		StudentDA d = new StudentDA();
		List<Student> stlist=new ArrayList<>();
		stlist=d.allstudent();
		return stlist;
	}
	
	@GetMapping(value="/search/{id}")
	public List<Student> serach(@PathVariable("id") int id){
		StudentDA d = new StudentDA();
		stlist=d.searchstudent(id);
		return stlist;
	}
	
}
--------------------------------------- DAU --------------------------------------------

package com.example.demo;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class StudentDA {

	PreparedStatement pstmt;
	Connection con;
	
	public Student insert(Student p) {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stdb", "root", "nclc123456");
			pstmt = con.prepareStatement("insert into student values(?,?,?,?)");
			pstmt.setInt(1, p.id);
			pstmt.setString(2, p.name);
			pstmt.setString(3, p.email);
			pstmt.setString(4, p.round);
			int n = pstmt.executeUpdate();

			con.close();
		} catch (SQLException | ClassNotFoundException e) {
			e.printStackTrace();
		}
		return p;
	}



	public Student studentSigninById(int id) {
		Student s = new Student();
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stdb", "root", "nclc123456");
			pstmt = con.prepareStatement("select * from student where id=" + id);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				s = new Student(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4));
			}
			
			con.close();
		} catch (SQLException | ClassNotFoundException e) {
			e.printStackTrace();
		}
		return s;
	}
	
	public List<Student> allstudent() {
		List<Student> stlist = new ArrayList<>();
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stdb", "root", "nclc123456");
			pstmt = con.prepareStatement("select * from student");
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				stlist.add(new Student(rs.getInt(1),rs.getString(2),rs.getString(3),rs.getString(4)));
			}
			
			con.close();
		} catch (SQLException | ClassNotFoundException e) {
			e.printStackTrace();
		}
		return stlist;
	}
	
	public List<Student> searchstudent(int id) {
		List<Student> stlist = new ArrayList<>();
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stdb", "root", "nclc123456");
			pstmt = con.prepareStatement("select * from student where id=" + id);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				stlist.add(new Student(rs.getInt(1),rs.getString(2),rs.getString(3),rs.getString(4)));
			}
			con.close();
		} catch (SQLException | ClassNotFoundException e) {
			e.printStackTrace();
		}
		return stlist;
	}
	
}



---------------------------------------------- data base thake image flutter ya show korano  process -------------------------------

	===========  #. table ya akta column banano [ varchar(500/1000) ]
		     #. spring yar table class field deya + only setter & getter ya deya 
		     #. DAO class ya only while loop ya akto edit kora 
			( While loop + setter getter) ==>> only change

------------------------------------- createaccount.java class ya --------------------------------

	String img;

	public String getImg() {
		return img;
	}

	public void setImg(String img) {
		this.img = img;
	}	

	---------------------------------------------------- Dau class ya ----------------------------------------------------

	public class AdminDA {
	
	public List<Createaccount> searchaccnumber_getinfo(double a_number) {
		List<Createaccount> stlist = new ArrayList<>();
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection	con = DriverManager.getConnection("jdbc:mysql://localhost:3306/abcd", "root", "nclc123456");
			PreparedStatement	pstmt = con.prepareStatement("select * from createaccount where a_number=" + a_number);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				Createaccount ac=new Createaccount(rs.getDouble(1), rs.getString(2), rs.getDouble(3), rs.getString(4),
						rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9),
						rs.getString(10), rs.getString(11), rs.getString(12), rs.getDouble(13));
				ac.setImg(rs.getString(14));
				stlist.add(ac);
			}
			con.close();
		} catch (SQLException | ClassNotFoundException e) {
			e.printStackTrace();
		}
		return stlist;
	}
